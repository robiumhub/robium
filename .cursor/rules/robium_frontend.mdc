---
description: Frontend development rules for React components, hooks, API services, testing, and accessibility
globs: packages/frontend/**/*, packages/frontend/package.json
alwaysApply: true
---

# Robium Frontend Development Rules

## React Component Patterns

### Functional Component Structure

```typescript
// ✅ DO: Use functional components with proper TypeScript interfaces
interface ComponentProps {
  title: string;
  onSubmit: (data: FormData) => Promise<void>;
  loading?: boolean;
  className?: string;
}

export const Component: React.FC<ComponentProps> = ({
  title,
  onSubmit,
  loading = false,
  className
}) => {
  const [formData, setFormData] = useState<FormData>({});
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    try {
      await onSubmit(formData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  }, [formData, onSubmit]);

  return (
    <div className={className}>
      <h2>{title}</h2>
      {error && <div className="error">{error}</div>}
      <form onSubmit={handleSubmit}>
        {/* Form content */}
      </form>
    </div>
  );
};

// ❌ DON'T: Use class components or missing TypeScript
class Component extends React.Component {
  render() {
    return <div>{this.props.title}</div>; // No TypeScript, outdated pattern
  }
}
```

### Custom Hooks

```typescript
// ✅ DO: Create reusable custom hooks for API calls
export const useUser = (userId: string) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/users/${userId}`);

        if (!response.ok) {
          throw new Error('Failed to fetch user');
        }

        const data = await response.json();
        setUser(data.data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    if (userId) {
      fetchUser();
    }
  }, [userId]);

  return { user, loading, error, refetch: () => fetchUser() };
};

// Usage in components
const UserProfile: React.FC<{ userId: string }> = ({ userId }) => {
  const { user, loading, error } = useUser(userId);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!user) return <div>User not found</div>;

  return <div>Welcome, {user.username}!</div>;
};
```

## API Integration Patterns

### Service Layer

```typescript
// ✅ DO: Create a service layer for API calls
export class ApiService {
  private static baseURL =
    process.env.REACT_APP_API_URL || 'http://localhost:8000';

  private static async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseURL}${endpoint}`;
    const token = localStorage.getItem('authToken');

    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...(token && { Authorization: `Bearer ${token}` }),
        ...options.headers,
      },
      ...options,
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || `HTTP ${response.status}`);
    }

    return response.json();
  }

  static async getUser(id: string): Promise<User> {
    const response = await this.request<User>(`/api/users/${id}`);
    return response.data!;
  }

  static async createUser(userData: CreateUserInput): Promise<User> {
    const response = await this.request<User>('/api/users', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
    return response.data!;
  }
}

// ❌ DON'T: Make direct fetch calls in components
const Component = () => {
  const [user, setUser] = useState();

  useEffect(() => {
    fetch('/api/users/123')
      .then((res) => res.json())
      .then(setUser); // No error handling
  }, []);
};
```

### Error Handling

```typescript
// ✅ DO: Create a centralized error handling system
export class ErrorHandler {
  static handle(error: unknown): string {
    if (error instanceof Error) {
      return error.message;
    }

    if (typeof error === 'string') {
      return error;
    }

    return 'An unexpected error occurred';
  }

  static async handleApiError(error: unknown): Promise<string> {
    if (error instanceof Response) {
      try {
        const errorData = await error.json();
        return errorData.error || `HTTP ${error.status}`;
      } catch {
        return `HTTP ${error.status}`;
      }
    }

    return this.handle(error);
  }
}

// Usage in components
const [error, setError] = useState<string | null>(null);

try {
  await ApiService.createUser(userData);
} catch (err) {
  setError(ErrorHandler.handle(err));
}
```

## State Management

### Local State with useState

```typescript
// ✅ DO: Use useState for component-local state
const LoginForm: React.FC = () => {
  const [credentials, setCredentials] = useState({
    email: '',
    password: '',
  });
  const [loading, setLoading] = useState(false);

  const handleInputChange = (field: keyof typeof credentials) => (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setCredentials(prev => ({
      ...prev,
      [field]: e.target.value,
    }));
  };

  return (
    <form>
      <input
        type="email"
        value={credentials.email}
        onChange={handleInputChange('email')}
        placeholder="Email"
      />
      <input
        type="password"
        value={credentials.password}
        onChange={handleInputChange('password')}
        placeholder="Password"
      />
    </form>
  );
};
```

### Context for Global State

```typescript
// ✅ DO: Use React Context for global state that needs to be shared
interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  const login = useCallback(async (email: string, password: string) => {
    setLoading(true);
    try {
      const response = await ApiService.login({ email, password });
      setUser(response.user);
      localStorage.setItem('authToken', response.token);
    } finally {
      setLoading(false);
    }
  }, []);

  const logout = useCallback(() => {
    setUser(null);
    localStorage.removeItem('authToken');
  }, []);

  useEffect(() => {
    const token = localStorage.getItem('authToken');
    if (token) {
      // Verify token and get user
      ApiService.getCurrentUser()
        .then(setUser)
        .catch(() => logout())
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, [logout]);

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};
```

## TypeScript Patterns

### Component Props

```typescript
// ✅ DO: Define clear interfaces for component props
interface UserCardProps {
  user: User;
  onEdit?: (user: User) => void;
  onDelete?: (userId: string) => void;
  showActions?: boolean;
  className?: string;
}

// ✅ DO: Use optional props with default values
export const UserCard: React.FC<UserCardProps> = ({
  user,
  onEdit,
  onDelete,
  showActions = true,
  className = ''
}) => {
  // Component implementation
};

// ❌ DON'T: Use any or missing interfaces
const UserCard = ({ user, onEdit }: any) => { // Bad typing
```

### Event Handlers

```typescript
// ✅ DO: Type event handlers properly
interface FormProps {
  onSubmit: (data: FormData) => void;
  onChange: (field: string, value: string) => void;
}

const Form: React.FC<FormProps> = ({ onSubmit, onChange }) => {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Handle form submission
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.name, e.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input name="email" onChange={handleInputChange} />
    </form>
  );
};
```

## Styling Patterns

### CSS Modules (if used)

```typescript
// ✅ DO: Use CSS modules for component-scoped styles
import styles from './Component.module.css';

export const Component: React.FC = () => {
  return (
    <div className={styles.container}>
      <h2 className={styles.title}>Title</h2>
      <button className={`${styles.button} ${styles.primary}`}>
        Click me
      </button>
    </div>
  );
};
```

### Conditional Classes

```typescript
// ✅ DO: Create a utility for conditional classes
export const classNames = (...classes: (string | undefined | null | false)[]): string => {
  return classes.filter(Boolean).join(' ');
};

// Usage
const Button: React.FC<ButtonProps> = ({ variant, disabled, children }) => {
  return (
    <button
      className={classNames(
        'btn',
        variant === 'primary' && 'btn-primary',
        variant === 'secondary' && 'btn-secondary',
        disabled && 'btn-disabled'
      )}
      disabled={disabled}
    >
      {children}
    </button>
  );
};
```

## Performance Optimization

### Memoization

```typescript
// ✅ DO: Use React.memo for expensive components
export const ExpensiveComponent = React.memo<ExpensiveComponentProps>(({ data, onUpdate }) => {
  const processedData = useMemo(() => {
    return data.map(item => ({
      ...item,
      computed: expensiveComputation(item)
    }));
  }, [data]);

  const handleUpdate = useCallback((id: string, updates: Partial<Item>) => {
    onUpdate(id, updates);
  }, [onUpdate]);

  return (
    <div>
      {processedData.map(item => (
        <ItemComponent
          key={item.id}
          item={item}
          onUpdate={handleUpdate}
        />
      ))}
    </div>
  );
});
```

### Code Splitting

```typescript
// ✅ DO: Use lazy loading for route components
import { lazy, Suspense } from 'react';

const Dashboard = lazy(() => import('./pages/Dashboard'));
const UserProfile = lazy(() => import('./pages/UserProfile'));

export const App: React.FC = () => {
  return (
    <Router>
      <Suspense fallback={<div>Loading...</div>}>
        <Routes>
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/profile" element={<UserProfile />} />
        </Routes>
      </Suspense>
    </Router>
  );
};
```

## Testing Patterns

### Component Testing

```typescript
// ✅ DO: Write comprehensive component tests
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { UserCard } from './UserCard';

const mockUser: User = {
  id: '1',
  email: 'test@example.com',
  username: 'testuser',
  role: UserRole.USER,
  createdAt: new Date(),
  updatedAt: new Date(),
};

describe('UserCard', () => {
  it('renders user information correctly', () => {
    render(<UserCard user={mockUser} />);

    expect(screen.getByText('testuser')).toBeInTheDocument();
    expect(screen.getByText('test@example.com')).toBeInTheDocument();
  });

  it('calls onEdit when edit button is clicked', async () => {
    const onEdit = jest.fn();
    render(<UserCard user={mockUser} onEdit={onEdit} />);

    fireEvent.click(screen.getByRole('button', { name: /edit/i }));

    await waitFor(() => {
      expect(onEdit).toHaveBeenCalledWith(mockUser);
    });
  });

  it('does not show actions when showActions is false', () => {
    render(<UserCard user={mockUser} showActions={false} />);

    expect(screen.queryByRole('button')).not.toBeInTheDocument();
  });
});
```

### Custom Hook Testing

```typescript
// ✅ DO: Test custom hooks with renderHook
import { renderHook, waitFor } from '@testing-library/react';
import { useUser } from './useUser';

// Mock fetch
global.fetch = jest.fn();

describe('useUser', () => {
  beforeEach(() => {
    (fetch as jest.Mock).mockClear();
  });

  it('fetches user data successfully', async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve({ data: mockUser }),
    });

    const { result } = renderHook(() => useUser('1'));

    expect(result.current.loading).toBe(true);

    await waitFor(() => {
      expect(result.current.loading).toBe(false);
    });

    expect(result.current.user).toEqual(mockUser);
    expect(result.current.error).toBeNull();
  });
});
```

## File Organization

### Directory Structure

```
packages/frontend/src/
├── index.tsx                 # React entry point
├── App.tsx                   # Main app component
├── components/               # Reusable UI components
│   ├── common/              # Generic components (Button, Input, etc.)
│   ├── forms/               # Form-specific components
│   └── layout/              # Layout components (Header, Sidebar, etc.)
├── pages/                   # Page-level components
│   ├── auth/                # Authentication pages
│   ├── dashboard/           # Dashboard pages
│   └── users/               # User management pages
├── hooks/                   # Custom React hooks
│   ├── useAuth.ts           # Authentication hook
│   ├── useApi.ts            # API interaction hooks
│   └── useLocalStorage.ts   # Browser API hooks
├── services/                # API services and external integrations
│   ├── api.ts               # Main API service
│   ├── auth.ts              # Authentication service
│   └── websocket.ts         # WebSocket service
├── types/                   # TypeScript type definitions
│   ├── api.ts               # API response types
│   ├── user.ts              # User-related types
│   └── index.ts             # Re-exports
├── utils/                   # Utility functions
│   ├── classNames.ts        # CSS class utilities
│   ├── validation.ts        # Form validation
│   └── formatters.ts        # Data formatting
├── contexts/                # React contexts
│   ├── AuthContext.tsx      # Authentication context
│   └── ThemeContext.tsx     # Theme context
└── assets/                  # Static assets
    ├── images/              # Image files
    └── styles/              # Global CSS files
```

## Environment Configuration

### Environment Variables

```typescript
// ✅ DO: Use environment variables for configuration
const config = {
  apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000',
  wsUrl: process.env.REACT_APP_WS_URL || 'ws://localhost:8000',
  environment: process.env.NODE_ENV,
  isDevelopment: process.env.NODE_ENV === 'development',
  isProduction: process.env.NODE_ENV === 'production',
};

export default config;

// ❌ DON'T: Hardcode URLs or configuration
const API_URL = 'http://localhost:8000'; // Bad - not configurable
```

## Accessibility

### ARIA Labels and Semantic HTML

```typescript
// ✅ DO: Use semantic HTML and proper ARIA labels
export const SearchForm: React.FC = () => {
  const [query, setQuery] = useState('');

  return (
    <form role="search" aria-label="Search users">
      <label htmlFor="search-input" className="sr-only">
        Search for users
      </label>
      <input
        id="search-input"
        type="search"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search users..."
        aria-describedby="search-help"
      />
      <button type="submit" aria-label="Submit search">
        <SearchIcon aria-hidden="true" />
      </button>
      <div id="search-help" className="sr-only">
        Enter a username or email to search for users
      </div>
    </form>
  );
};
```

Follow these patterns consistently throughout the frontend codebase. Reference the [React documentation](https://react.dev/) and [TypeScript documentation](https://www.typescriptlang.org/docs/) for additional guidance.
