---
description: Backend development rules for Express, database access, migrations, authentication, and testing
globs: packages/backend/**/*, packages/backend/package.json
alwaysApply: true
---

# Robium Backend Development Rules

## Express.js Server Patterns

### Route Handler Structure

```typescript
// ✅ DO: Use async/await with proper error handling
app.get('/api/users/:id', async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const user = await Database.query(
      'SELECT id, email, username, role FROM users WHERE id = $1',
      [id]
    );

    if (user.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'User not found',
      });
    }

    res.json({
      success: true,
      data: user.rows[0],
    });
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

// ❌ DON'T: Missing error handling or type safety
app.get('/api/users/:id', (req, res) => {
  const user = Database.query(
    'SELECT * FROM users WHERE id = ' + req.params.id
  );
  res.json(user); // No error handling, SQL injection risk
});
```

### Middleware Patterns

```typescript
// ✅ DO: Create reusable middleware with proper typing
export const authMiddleware = async (
  req: AuthRequest,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: 'No token provided' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

// Use in routes
app.get('/api/protected', authMiddleware, async (req: AuthRequest, res) => {
  // req.user is now available and typed
});
```

## Database Operation Patterns

### Query Patterns

```typescript
// ✅ DO: Use parameterized queries with proper error handling
export class UserModel {
  static async findById(id: string): Promise<User | null> {
    try {
      const result = await Database.query(
        'SELECT id, email, username, role, created_at, updated_at FROM users WHERE id = $1',
        [id]
      );
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding user by ID:', error);
      throw new Error('Failed to fetch user');
    }
  }

  static async create(userData: CreateUserInput): Promise<User> {
    const { email, username, password, role = UserRole.USER } = userData;
    const passwordHash = await bcrypt.hash(password, 12);

    try {
      const result = await Database.query(
        `INSERT INTO users (email, username, password_hash, role) 
         VALUES ($1, $2, $3, $4) 
         RETURNING id, email, username, role, created_at, updated_at`,
        [email, username, passwordHash, role]
      );
      return result.rows[0];
    } catch (error) {
      if (error.code === '23505') {
        // Unique constraint violation
        throw new Error('Email or username already exists');
      }
      console.error('Error creating user:', error);
      throw new Error('Failed to create user');
    }
  }
}

// ❌ DON'T: String concatenation or missing error handling
const user = await Database.query(
  `SELECT * FROM users WHERE email = '${email}'`
);
```

### Transaction Patterns

```typescript
// ✅ DO: Use transactions for multi-step operations
export class ProjectService {
  static async createProjectWithMember(
    projectData: CreateProjectInput,
    ownerId: string
  ) {
    return await Database.transaction(async (client) => {
      // Create project
      const project = await client.query(
        'INSERT INTO projects (name, description, owner_id) VALUES ($1, $2, $3) RETURNING *',
        [projectData.name, projectData.description, ownerId]
      );

      // Add owner as project member
      await client.query(
        'INSERT INTO project_members (project_id, user_id, role) VALUES ($1, $2, $3)',
        [project.rows[0].id, ownerId, 'owner']
      );

      return project.rows[0];
    });
  }
}
```

## Migration Patterns

### Migration File Structure

```sql
-- ✅ DO: Always include both UP and DOWN sections
-- UP
CREATE TABLE example_table (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_example_email ON example_table(email);

-- DOWN
DROP INDEX IF EXISTS idx_example_email;
DROP TABLE IF EXISTS example_table;
```

### Migration Commands

```bash
# ✅ DO: Use the established migration commands
npm run migrate:up        # Run pending migrations
npm run migrate:down      # Rollback last migration
npm run migrate:status    # Check migration status
npm run migrate:reset     # Reset all migrations (destructive)
```

## TypeScript Patterns

### Type Definitions

```typescript
// ✅ DO: Define interfaces in src/types/index.ts
export interface User {
  id: string;
  email: string;
  username: string;
  role: UserRole;
  createdAt: Date;
  updatedAt: Date;
}

export interface CreateUserInput {
  email: string;
  username: string;
  password: string;
  role?: UserRole;
}

export interface AuthRequest extends Request {
  user?: JWTPayload;
}

// ❌ DON'T: Use any types or inline interfaces
const user: any = await getUser(); // Bad
```

### API Response Types

```typescript
// ✅ DO: Use consistent API response structure
export interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}

// Usage in routes
res.json({
  success: true,
  data: user,
  message: 'User retrieved successfully',
} as ApiResponse<User>);
```

## Authentication & Security

### Password Hashing

```typescript
// ✅ DO: Use bcrypt with appropriate rounds
import bcrypt from 'bcryptjs';

const hashPassword = async (password: string): Promise<string> => {
  return await bcrypt.hash(password, 12); // 12 rounds for security
};

const verifyPassword = async (
  password: string,
  hash: string
): Promise<boolean> => {
  return await bcrypt.compare(password, hash);
};
```

### JWT Handling

```typescript
// ✅ DO: Use environment variables for secrets
const generateToken = (payload: JWTPayload): string => {
  return jwt.sign(payload, process.env.JWT_SECRET!, {
    expiresIn: process.env.JWT_EXPIRES_IN || '1h',
  });
};

const verifyToken = (token: string): JWTPayload => {
  return jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
};
```

## Environment Configuration

### Environment Variables

```typescript
// ✅ DO: Use environment variables for configuration
const config = {
  port: process.env.PORT || 8000,
  database: {
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'robiumdb',
    user: process.env.DB_USER || 'user',
    password: process.env.DB_PASSWORD || 'password',
  },
  jwt: {
    secret: process.env.JWT_SECRET!,
    expiresIn: process.env.JWT_EXPIRES_IN || '1h',
  },
};

// ❌ DON'T: Hardcode sensitive values
const secret = 'hardcoded-secret'; // Never do this
```

## Testing Patterns

### Jest Test Structure

```typescript
// ✅ DO: Use proper test structure with setup/teardown
describe('UserModel', () => {
  beforeEach(async () => {
    await Database.query('BEGIN');
  });

  afterEach(async () => {
    await Database.query('ROLLBACK');
  });

  describe('findById', () => {
    it('should return user when found', async () => {
      // Create test user
      const user = await UserModel.create({
        email: 'test@example.com',
        username: 'testuser',
        password: 'password123',
      });

      // Test retrieval
      const found = await UserModel.findById(user.id);
      expect(found).toMatchObject({
        id: user.id,
        email: 'test@example.com',
        username: 'testuser',
      });
    });

    it('should return null when user not found', async () => {
      const found = await UserModel.findById('non-existent-id');
      expect(found).toBeNull();
    });
  });
});
```

## File Organization

### Directory Structure

```
packages/backend/src/
├── index.ts              # Express server entry point
├── routes/               # API route handlers
│   ├── auth.ts          # Authentication routes
│   ├── users.ts         # User management routes
│   └── projects.ts      # Project management routes
├── models/              # Data models and business logic
│   ├── User.ts          # User model
│   ├── Project.ts       # Project model
│   └── Session.ts       # Session model
├── middleware/          # Express middleware
│   ├── auth.ts          # Authentication middleware
│   ├── validation.ts    # Input validation middleware
│   └── errorHandler.ts  # Global error handling
├── utils/               # Utility functions
│   ├── database.ts      # Database connection and helpers
│   ├── migrations.ts    # Migration system
│   └── validation.ts    # Validation helpers
├── types/               # TypeScript type definitions
│   └── index.ts         # All shared types
├── migrations/          # Database migration files
│   └── 001_initial_schema.sql
├── scripts/             # CLI scripts
│   └── migrate.ts       # Migration CLI
└── __tests__/           # Test files
    ├── setup.ts         # Test setup and configuration
    ├── models/          # Model tests
    └── routes/          # Route tests
```

## Error Handling

### Global Error Handler

```typescript
// ✅ DO: Implement comprehensive error handling
app.use((err: ApiError, req: Request, res: Response, next: NextFunction) => {
  console.error('Error:', {
    message: err.message,
    stack: err.stack,
    url: req.url,
    method: req.method,
    timestamp: new Date().toISOString(),
  });

  res.status(err.status || 500).json({
    success: false,
    error: err.message || 'Internal Server Error',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),
  });
});
```

### Custom Error Classes

```typescript
// ✅ DO: Create custom error types
export class ValidationError extends Error {
  status = 400;
  constructor(
    message: string,
    public errors?: ValidationError[]
  ) {
    super(message);
    this.name = 'ValidationError';
  }
}

export class NotFoundError extends Error {
  status = 404;
  constructor(resource: string) {
    super(`${resource} not found`);
    this.name = 'NotFoundError';
  }
}
```

## WebSocket Integration

### WebSocket Server Setup

```typescript
// ✅ DO: Integrate WebSocket with Express server
import { WebSocketServer } from 'ws';
import { createServer } from 'http';

const server = createServer(app);
const wss = new WebSocketServer({ server });

wss.on('connection', (ws, req) => {
  console.log('New WebSocket connection');

  ws.on('message', async (message) => {
    try {
      const data = JSON.parse(message.toString());
      // Handle WebSocket messages
      await handleWebSocketMessage(ws, data);
    } catch (error) {
      ws.send(JSON.stringify({ error: 'Invalid message format' }));
    }
  });

  ws.on('close', () => {
    console.log('WebSocket connection closed');
  });
});
```

## Development Workflow

### Server Startup

```typescript
// ✅ DO: Initialize database and run migrations on startup
async function startServer() {
  try {
    // Connect to database
    await Database.connect();

    // Run pending migrations
    const migrationManager = new MigrationManager();
    await migrationManager.runPendingMigrations();

    // Start server
    server.listen(PORT, () => {
      console.log(`🚀 Robium Backend Server running on port ${PORT}`);
      console.log(`📡 WebSocket server ready for connections`);
      console.log(`🗃️  Database connected and migrations applied`);
    });
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}
```

Follow these patterns consistently throughout the backend codebase. Reference [database.ts](mdc:packages/backend/src/utils/database.ts) and [migrations.ts](mdc:packages/backend/src/utils/migrations.ts) for implementation examples.
