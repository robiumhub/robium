---
description: Monorepo standards for structure, scripts, Docker, TypeScript, CI, and Taskmaster integration
globs: packages/**/*, package.json, docker-compose.yml, .github/workflows/*.yml, .taskmaster/**/*, .cursor/**/*, README.md
alwaysApply: true
---

# Robium Monorepo Development Rules

## Workspace Structure

### npm Workspaces Configuration

```json
// ✅ DO: Define workspaces in root package.json
{
  "name": "robium",
  "private": true,
  "workspaces": ["packages/*"],
  "scripts": {
    "dev": "npm-run-all --parallel dev:*",
    "build": "npm-run-all build:*",
    "test": "npm-run-all test:*",
    "lint": "npm-run-all lint:*"
  }
}
```

### Package Directory Structure

```
robium/
├── packages/                    # npm workspaces
│   ├── frontend/               # React frontend application
│   ├── backend/                # Express.js backend API
│   └── shared/                 # Shared types and utilities
├── .taskmaster/                # Task Master AI project management
├── .cursor/                    # Cursor IDE rules and configuration
├── .github/workflows/          # GitHub Actions CI/CD
├── docker-compose.yml          # Multi-service development
├── package.json                # Root workspace configuration
└── README.md                   # Project documentation
```

## Dependency Management

### Shared Dependencies

```json
// ✅ DO: Install shared dev dependencies at root level
// Root package.json
{
  "devDependencies": {
    "@types/jest": "^29.5.3",
    "@types/node": "^20.4.5",
    "typescript": "^5.1.6",
    "eslint": "^8.45.0",
    "prettier": "^3.0.0",
    "husky": "^8.0.3",
    "lint-staged": "^13.2.3"
  }
}

// ✅ DO: Install package-specific dependencies in each package
// packages/frontend/package.json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7"
  }
}

// packages/backend/package.json
{
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.3"
  },
  "devDependencies": {
    "@types/express": "^4.17.17",
    "@types/pg": "^8.10.2"
  }
}
```

### Cross-Package Dependencies

```json
// ✅ DO: Reference workspace packages by name
// packages/frontend/package.json
{
  "dependencies": {
    "@robium/shared": "workspace:*"
  }
}

// ❌ DON'T: Use relative paths for workspace packages
{
  "dependencies": {
    "@robium/shared": "file:../shared" // Don't do this
  }
}
```

## Docker Development Environment

### Multi-Service Architecture

```yaml
# ✅ DO: Use docker-compose for development environment
# docker-compose.yml
services:
  frontend:
    build:
      context: .
      dockerfile: ./packages/frontend/Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - ./packages/frontend/src:/app/packages/frontend/src
      - ./packages/frontend/public:/app/packages/frontend/public
    environment:
      - NODE_ENV=development
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: ./packages/backend/Dockerfile
    ports:
      - '8000:8000'
    volumes:
      - ./packages/backend/src:/app/packages/backend/src
    environment:
      - NODE_ENV=development
      - DB_HOST=database
    depends_on:
      - database

  database:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=robiumdb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - robium-db-data:/var/lib/postgresql/data
```

### Dockerfile Patterns

```dockerfile
# ✅ DO: Use monorepo-aware Dockerfile
# packages/frontend/Dockerfile
FROM node:18-alpine

# Set working directory to the frontend package
WORKDIR /app/packages/frontend

# Copy only the frontend package.json first
COPY packages/frontend/package.json packages/frontend/package-lock.json* ./

# Install dependencies locally without workspace context
RUN npm install

# Copy the frontend source code
COPY packages/frontend/src ./src
COPY packages/frontend/public ./public
COPY packages/frontend/tsconfig.json ./

EXPOSE 3000
CMD ["npm", "start"]
```

### Volume Mount Strategy

```yaml
# ✅ DO: Mount source directories only, preserving node_modules
volumes:
  - ./packages/frontend/src:/app/packages/frontend/src
  - ./packages/backend/src:/app/packages/backend/src

# ❌ DON'T: Mount entire package directories (overwrites node_modules)
volumes:
  - ./packages/frontend:/app  # This deletes container's node_modules
```

## Script Management

### Root-Level Scripts

```json
// ✅ DO: Create convenient root-level scripts
{
  "scripts": {
    "dev": "npm-run-all --parallel dev:*",
    "dev:frontend": "npm run dev --workspace=packages/frontend",
    "dev:backend": "npm run dev --workspace=packages/backend",
    "build": "npm-run-all build:*",
    "build:frontend": "npm run build --workspace=packages/frontend",
    "build:backend": "npm run build --workspace=packages/backend",
    "test": "npm-run-all test:*",
    "test:frontend": "npm run test --workspace=packages/frontend",
    "test:backend": "npm run test --workspace=packages/backend",
    "lint": "npm-run-all lint:*",
    "lint:frontend": "npm run lint --workspace=packages/frontend",
    "lint:backend": "npm run lint --workspace=packages/backend",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "prepare": "husky install"
  }
}
```

### Package-Specific Scripts

```json
// ✅ DO: Keep package-specific scripts in each package
// packages/frontend/package.json
{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "lint": "eslint src --ext .ts,.tsx"
  }
}

// packages/backend/package.json
{
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src --ext .ts",
    "migrate:up": "ts-node src/scripts/migrate.ts up",
    "migrate:down": "ts-node src/scripts/migrate.ts down"
  }
}
```

## TypeScript Configuration

### Root TypeScript Config

```json
// ✅ DO: Create a root tsconfig.json for shared settings
// tsconfig.json
{
  "compilerOptions": {
    "target": "es2020",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "references": [
    { "path": "./packages/frontend" },
    { "path": "./packages/backend" },
    { "path": "./packages/shared" }
  ]
}
```

### Package-Specific TypeScript Configs

```json
// ✅ DO: Extend root config in each package
// packages/frontend/tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@shared/*": ["../../shared/src/*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "build"]
}

// packages/backend/tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "outDir": "dist",
    "rootDir": "src",
    "baseUrl": "src",
    "paths": {
      "@shared/*": ["../../shared/src/*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist"]
}
```

## Code Quality and Linting

### ESLint Configuration

```javascript
// ✅ DO: Use shared ESLint config at root
// .eslintrc.js
module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  extends: ['eslint:recommended', '@typescript-eslint/recommended', 'prettier'],
  plugins: ['@typescript-eslint'],
  env: {
    node: true,
    es2020: true,
  },
  overrides: [
    {
      files: ['packages/frontend/**/*'],
      env: {
        browser: true,
      },
      extends: ['plugin:react/recommended'],
      plugins: ['react'],
      settings: {
        react: {
          version: 'detect',
        },
      },
    },
  ],
};
```

### Prettier Configuration

```json
// ✅ DO: Use consistent formatting across all packages
// .prettierrc
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2
}
```

### Git Hooks

```json
// ✅ DO: Use lint-staged for pre-commit hooks
// package.json
{
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": ["eslint --fix", "prettier --write"],
    "*.{json,md,yml,yaml}": ["prettier --write"]
  }
}
```

## Environment Configuration

### Environment File Structure

```
robium/
├── .env.example                # Template for root environment
├── packages/frontend/
│   ├── .env.example            # Frontend-specific environment template
│   └── .env                    # Frontend environment (gitignored)
└── packages/backend/
    ├── .env.example            # Backend-specific environment template
    └── .env                    # Backend environment (gitignored)
```

### Environment Variable Patterns

```bash
# ✅ DO: Use consistent prefixes for environment variables
# packages/frontend/.env
REACT_APP_API_URL=http://localhost:8000
REACT_APP_WS_URL=ws://localhost:8000

# packages/backend/.env
PORT=8000
NODE_ENV=development
DB_HOST=localhost
DB_PORT=5432
DB_NAME=robiumdb
DB_USER=user
DB_PASSWORD=password
JWT_SECRET=your-super-secret-jwt-key
```

## Testing Strategy

### Package-Level Testing

```json
// ✅ DO: Configure testing in each package
// packages/frontend/package.json
{
  "scripts": {
    "test": "react-scripts test",
    "test:coverage": "react-scripts test --coverage --watchAll=false"
  }
}

// packages/backend/package.json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}
```

### Root-Level Test Scripts

```json
// ✅ DO: Aggregate tests at root level
{
  "scripts": {
    "test": "npm-run-all test:*",
    "test:frontend": "npm run test:coverage --workspace=packages/frontend",
    "test:backend": "npm run test:coverage --workspace=packages/backend",
    "test:coverage": "npm run test && npm run coverage:merge"
  }
}
```

## CI/CD Configuration

### GitHub Actions Workflow

```yaml
# ✅ DO: Use efficient CI/CD for monorepo
# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

      - name: Build
        run: npm run build
```

## Development Workflow

### Starting Development

```bash
# ✅ DO: Use these commands for development
npm install                    # Install all workspace dependencies
npm run dev                   # Start all services in development mode
npm run dev:frontend         # Start only frontend
npm run dev:backend          # Start only backend

# Using Docker
docker compose up            # Start all services with Docker
docker compose up frontend   # Start only frontend service
```

### Adding Dependencies

```bash
# ✅ DO: Add dependencies to specific packages
npm install express --workspace=packages/backend
npm install react --workspace=packages/frontend
npm install typescript --save-dev  # Add to root for shared dev dependencies

# ❌ DON'T: Add package-specific deps to root
npm install express  # Wrong - this goes to root
```

### Package Management Commands

```bash
# ✅ DO: Use workspace-specific commands
npm run build --workspace=packages/frontend
npm run test --workspace=packages/backend
npm run lint --workspaces  # Run in all workspaces

# Clean and reinstall
rm -rf node_modules packages/*/node_modules package-lock.json
npm install
```

## Shared Code Patterns

### Shared Types Package

```typescript
// ✅ DO: Create shared types for cross-package usage
// packages/shared/src/types/api.ts
export interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}

export interface User {
  id: string;
  email: string;
  username: string;
  role: UserRole;
  createdAt: Date;
  updatedAt: Date;
}

// packages/shared/src/index.ts
export * from './types/api';
export * from './types/user';
export * from './utils/validation';
```

### Using Shared Code

```typescript
// ✅ DO: Import shared types in packages
// packages/frontend/src/services/api.ts
import { ApiResponse, User } from '@robium/shared';

// packages/backend/src/models/User.ts
import { User, CreateUserInput } from '@robium/shared';
```

## Task Master Integration

### Project Structure for Task Master

```
.taskmaster/
├── tasks/
│   └── tasks.json              # Generated tasks
├── docs/
│   ├── prd.txt                 # Product Requirements Document
│   └── research/               # Research outputs
├── reports/
│   └── task-complexity-report.json
└── config.json                 # Task Master configuration
```

### Task Master Commands

```bash
# ✅ DO: Use Task Master for project management
task-master init                # Initialize Task Master
task-master parse-prd prd.txt   # Generate tasks from PRD
task-master list               # Show current tasks
task-master next               # Get next task to work on
task-master show 2.3           # Show specific task/subtask
task-master set-status --id=2.3 --status=done
```

Follow these patterns to maintain consistency across the monorepo structure. Reference [package.json](mdc:package.json) and [docker-compose.yml](mdc:docker-compose.yml) for current configuration examples.
